--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function() return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...) local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte) if (Byte(byte,2)==81) then local FlatIdent_95CAC=0;while true do if (FlatIdent_95CAC==0) then repeatNext=StrToNumber(Sub(byte,1,1));return "";end end else local FlatIdent_76979=0;local a;while true do if (FlatIdent_76979==0) then a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end break;end end end end);local function gBit(Bit,Start,End) if End then local FlatIdent_3BEFE=0;local Res;while true do if (0==FlatIdent_3BEFE) then Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;end end else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8() local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16() local FlatIdent_5AC6=0;local a;local b;while true do if (1==FlatIdent_5AC6) then return (b * 256) + a ;end if (FlatIdent_5AC6==0) then a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;FlatIdent_5AC6=1;end end end local function gBits32() local FlatIdent_45AC8=0;local a;local b;local c;local d;while true do if (FlatIdent_45AC8==0) then a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;FlatIdent_45AC8=1;end if (FlatIdent_45AC8==1) then return (d * 16777216) + (c * 65536) + (b * 256) + a ;end end end local function gFloat() local FlatIdent_69270=0;local Left;local Right;local IsNormal;local Mantissa;local Exponent;local Sign;while true do if (FlatIdent_69270==3) then if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end if (FlatIdent_69270==0) then Left=gBits32();Right=gBits32();FlatIdent_69270=1;end if (FlatIdent_69270==2) then Exponent=gBit(Right,21,31);Sign=((gBit(Right,32)==1) and  -1) or 1 ;FlatIdent_69270=3;end if (FlatIdent_69270==1) then IsNormal=1;Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;FlatIdent_69270=2;end end end local function gString(Len) local FlatIdent_82BF=0;local Str;local FStr;while true do if (3==FlatIdent_82BF) then return Concat(FStr);end if (FlatIdent_82BF==1) then Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;FlatIdent_82BF=2;end if (2==FlatIdent_82BF) then FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end FlatIdent_82BF=3;end if (FlatIdent_82BF==0) then Str=nil;if  not Len then Len=gBits32();if (Len==0) then return "";end end FlatIdent_82BF=1;end end end local gInt=gBits32;local function _R(...) return {...},Select("#",...);end local function Deserialize() local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local FlatIdent_D076=0;local Descriptor;while true do if (0==FlatIdent_D076) then Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end break;end end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end return Chunk;end local function Wrap(Chunk,Upvalues,Env) local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...) local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local VIP=1;local Top= -1;local Vararg={};local Args={...};local PCount=Select("#",...) -1 ;local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do local FlatIdent_88CAD=0;while true do if (FlatIdent_88CAD==0) then Inst=Instr[VIP];Enum=Inst[1];FlatIdent_88CAD=1;end if (FlatIdent_88CAD==1) then if (Enum<=44) then if (Enum<=21) then if (Enum<=10) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A;Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];else local B;local A;A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Stk[A + 1 ]);VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];end elseif (Enum<=2) then do return;end elseif (Enum==3) then local FlatIdent_1743D=0;local A;local Results;local Limit;local Edx;while true do if (FlatIdent_1743D==1) then Top=(Limit + A) -1 ;Edx=0;FlatIdent_1743D=2;end if (2==FlatIdent_1743D) then for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end break;end if (FlatIdent_1743D==0) then A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Top)));FlatIdent_1743D=1;end end else local FlatIdent_72401=0;local A;local T;local B;while true do if (1==FlatIdent_72401) then B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end break;end if (FlatIdent_72401==0) then A=Inst[2];T=Stk[A];FlatIdent_72401=1;end end end elseif (Enum<=7) then if (Enum<=5) then if (Stk[Inst[2]]<Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>6) then local FlatIdent_30B76=0;local A;local T;while true do if (FlatIdent_30B76==0) then A=Inst[2];T=Stk[A];FlatIdent_30B76=1;end if (FlatIdent_30B76==1) then for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end break;end end else local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=8) then local FlatIdent_674F6=0;while true do if (FlatIdent_674F6==3) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_674F6=4;end if (FlatIdent_674F6==2) then Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_674F6=3;end if (FlatIdent_674F6==1) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_674F6=2;end if (FlatIdent_674F6==4) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];break;end if (FlatIdent_674F6==0) then Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_674F6=1;end end elseif (Enum==9) then Stk[Inst[2]]=Inst[3]~=0 ;else local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];end elseif (Enum<=15) then if (Enum<=12) then if (Enum==11) then local FlatIdent_1FF48=0;local DIP;local NStk;local Upv;local List;local Cls;local B;local A;while true do if (1==FlatIdent_1FF48) then List=nil;Cls=nil;B=nil;FlatIdent_1FF48=2;end if (FlatIdent_1FF48==4) then Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;FlatIdent_1FF48=5;end if (FlatIdent_1FF48==0) then DIP=nil;NStk=nil;Upv=nil;FlatIdent_1FF48=1;end if (FlatIdent_1FF48==7) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_1FF48=8;end if (FlatIdent_1FF48==3) then Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];FlatIdent_1FF48=4;end if (6==FlatIdent_1FF48) then Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));FlatIdent_1FF48=7;end if (5==FlatIdent_1FF48) then Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;FlatIdent_1FF48=6;end if (8==FlatIdent_1FF48) then Cls={};for Idx=1, #Lupvals do local FlatIdent_39B0=0;while true do if (FlatIdent_39B0==0) then List=Lupvals[Idx];for Idz=0, #List do local FlatIdent_1076E=0;while true do if (1==FlatIdent_1076E) then DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end break;end if (FlatIdent_1076E==0) then Upv=List[Idz];NStk=Upv[1];FlatIdent_1076E=1;end end end break;end end end VIP=VIP + 1 ;FlatIdent_1FF48=9;end if (2==FlatIdent_1FF48) then A=nil;Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;FlatIdent_1FF48=3;end if (FlatIdent_1FF48==9) then Inst=Instr[VIP];do return;end break;end end else local FlatIdent_A36C=0;local NewProto;local NewUvals;local Indexes;while true do if (FlatIdent_A36C==1) then Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key) local FlatIdent_38103=0;local Val;while true do if (FlatIdent_38103==0) then Val=Indexes[Key];return Val[1][Val[2]];end end end,__newindex=function(_,Key,Value) local FlatIdent_27957=0;local Val;while true do if (0==FlatIdent_27957) then Val=Indexes[Key];Val[1][Val[2]]=Value;break;end end end});FlatIdent_A36C=2;end if (FlatIdent_A36C==0) then NewProto=Proto[Inst[3]];NewUvals=nil;FlatIdent_A36C=1;end if (FlatIdent_A36C==2) then for Idx=1,Inst[4] do local FlatIdent_4B539=0;local Mvm;while true do if (FlatIdent_4B539==1) then if (Mvm[1]==31) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;break;end if (FlatIdent_4B539==0) then VIP=VIP + 1 ;Mvm=Instr[VIP];FlatIdent_4B539=1;end end end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);break;end end end elseif (Enum<=13) then local FlatIdent_77C29=0;local A;while true do if (FlatIdent_77C29==2) then Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;FlatIdent_77C29=3;end if (FlatIdent_77C29==0) then A=nil;Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;FlatIdent_77C29=1;end if (FlatIdent_77C29==1) then Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;FlatIdent_77C29=2;end if (FlatIdent_77C29==4) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];break;end if (FlatIdent_77C29==3) then Inst=Instr[VIP];A=Inst[2];Stk[A](Stk[A + 1 ]);FlatIdent_77C29=4;end end elseif (Enum>14) then local FlatIdent_93E71=0;while true do if (FlatIdent_93E71==2) then Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_93E71=3;end if (FlatIdent_93E71==3) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];FlatIdent_93E71=4;end if (0==FlatIdent_93E71) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];FlatIdent_93E71=1;end if (FlatIdent_93E71==4) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];break;end if (FlatIdent_93E71==1) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;FlatIdent_93E71=2;end end else Stk[Inst[2]]=Env[Inst[3]];end elseif (Enum<=18) then if (Enum<=16) then Stk[Inst[2]]=Inst[3] + Stk[Inst[4]] ;elseif (Enum==17) then local A=Inst[2];local Index=Stk[A];local Step=Stk[A + 2 ];if (Step>0) then if (Index>Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end elseif (Index<Stk[A + 1 ]) then VIP=Inst[3];else Stk[A + 3 ]=Index;end else local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end end elseif (Enum<=19) then local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then local FlatIdent_1B1BA=0;while true do if (FlatIdent_1B1BA==0) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;break;end end end end end elseif (Enum==20) then local B;local A;Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Stk[Inst[3]]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];else local FlatIdent_380E8=0;while true do if (FlatIdent_380E8==0) then Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];FlatIdent_380E8=1;end if (FlatIdent_380E8==3) then Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];break;end if (FlatIdent_380E8==2) then Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_380E8=3;end if (FlatIdent_380E8==1) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;FlatIdent_380E8=2;end end end elseif (Enum<=32) then if (Enum<=26) then if (Enum<=23) then if (Enum>22) then local FlatIdent_494DF=0;local A;while true do if (FlatIdent_494DF==1) then A=Inst[2];Stk[A](Stk[A + 1 ]);VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_494DF=2;end if (FlatIdent_494DF==3) then Stk[A]=Stk[A]();VIP=VIP + 1 ;Inst=Instr[VIP];if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end break;end if (FlatIdent_494DF==0) then A=nil;Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_494DF=1;end if (FlatIdent_494DF==2) then Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_494DF=3;end end else local FlatIdent_373F8=0;while true do if (FlatIdent_373F8==1) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;FlatIdent_373F8=2;end if (FlatIdent_373F8==3) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];FlatIdent_373F8=4;end if (FlatIdent_373F8==4) then VIP=VIP + 1 ;Inst=Instr[VIP];VIP=Inst[3];break;end if (FlatIdent_373F8==2) then Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_373F8=3;end if (FlatIdent_373F8==0) then Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];FlatIdent_373F8=1;end end end elseif (Enum<=24) then local A;Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];elseif (Enum==25) then if (Inst[2]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local FlatIdent_8D1A5=0;local A;while true do if (0==FlatIdent_8D1A5) then A=Inst[2];do return Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end break;end end end elseif (Enum<=29) then if (Enum<=27) then local FlatIdent_6B54C=0;local B;local T;local A;while true do if (FlatIdent_6B54C==6) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_6B54C=7;end if (FlatIdent_6B54C==4) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;FlatIdent_6B54C=5;end if (5==FlatIdent_6B54C) then Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_6B54C=6;end if (FlatIdent_6B54C==0) then B=nil;T=nil;A=nil;Stk[Inst[2]]=Upvalues[Inst[3]];FlatIdent_6B54C=1;end if (FlatIdent_6B54C==2) then Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_6B54C=3;end if (FlatIdent_6B54C==7) then T=Stk[A];B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end break;end if (3==FlatIdent_6B54C) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Upvalues[Inst[3]];FlatIdent_6B54C=4;end if (FlatIdent_6B54C==1) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];VIP=VIP + 1 ;FlatIdent_6B54C=2;end end elseif (Enum>28) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end else local FlatIdent_8B523=0;local A;while true do if (FlatIdent_8B523==16) then Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));FlatIdent_8B523=17;end if (13==FlatIdent_8B523) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_8B523=14;end if (FlatIdent_8B523==0) then A=nil;Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP +
